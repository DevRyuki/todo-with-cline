# 📌 Cline 使用時の開発ルールとガイドライン
このドキュメントは、Clineを利用してコードを効率的かつ品質高く作成するためのベストプラクティスをまとめています。開発の一貫性を保ち、生産性を向上させるために、以下のルールを守ってください。

常にコミュニケーションは日本語で行ってください。
---

## 1. テスト駆動開発（TDD）の実践

- 新しい機能を実装する前に、その機能を検証するためのテストを必ず作成する。
- テストが実装前の段階で失敗することを確認した後、機能を実装し、テストが通ることを確認する。
- すべてのテストが成功した後は、コードをリファクタリングして品質をさらに高める。

---

## 2. タスクの細分化と段階的な開発

- 大きなタスクは、明確で管理可能な小さなサブタスクに分割する。
- 各サブタスクを順番に実行し、各段階ごとの成果物を明確に定義する。
- 各段階の終了時点でmemory_bankを更新し、プロジェクトの進捗状況を最新に保つ。

---

## 3. ファイルの適切な分割による認知負荷の軽減

- コードが複雑になった場合や量が増えた場合、関連する機能やコンポーネントごとにファイルを適切に分割する。
- 各ファイルは単一の責務を持つように設計し、依存関係を明確に定義する。
- ファイル名やディレクトリ構造はプロジェクトの規約やベストプラクティスに沿って整える。

---

## 4. Lintによるコード品質の維持

- 常にLintエラーおよび警告を解消し、コードの品質と一貫性を保つ。
- Lintの解消はまずコマンドで試み、コマンドで解消できない場合のみ手動で編集する。
- Lintルールの詳細を確認するため、作業前に必ずプロジェクトの`.eslintrc.json`を参照する。

---

## 5. 小さく成功してから拡張する。
- 最初に複雑なコードや全部のコードを書くのではなく、最小限のコードで成功することを目指す。
- 段階的に機能を追加し、小さな成功を積み重ねる。
- 途中で問題が発生した場合は、すぐに原因を特定し、修正する。
- すべての処理を1回で実装するよりも、細かく成功を積み重ねる方が効率的である。

---
