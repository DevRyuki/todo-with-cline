# Cline Rules

## コード品質とスタイル

### テストファイルのESLintエラー解消
- テストファイルを作成・修正する際は、ESLintエラーを必ず解消すること
- テストファイルでモックを使用する場合は、適切な型定義を提供すること
- テストファイルの型エラーは、以下の方法で解消する：
  1. 適切な型アサーションを使用する（例：`as jest.Mock`）
  2. 必要に応じて型定義ファイル（`*.d.ts`）を作成・更新する
  3. モックオブジェクトに適切な型を指定する
  4. `@ts-expect-error` コメントは最小限に抑え、使用する場合は理由を明記する

### テスト実装のベストプラクティス
- テストは「準備（Arrange）→実行（Act）→検証（Assert）」のパターンに従う
- テストケースは独立しており、他のテストに依存しないこと
- モックは必要最小限に留め、実際の動作に近い形でテストすること
- テスト名は「何をテストするか」が明確に分かるようにすること
- 各テストファイルの冒頭でモックをセットアップし、`beforeEach`で初期化すること

## プロジェクト固有のパターン

### ファイル命名規則
- テストファイルは `__tests__` ディレクトリ内に配置し、`*.test.ts` または `*.test.tsx` という命名規則に従う
- モックファイルは `__mocks__` ディレクトリ内に配置する
- 型定義ファイルは `types` ディレクトリ内に配置し、`*.d.ts` という命名規則に従う

### コードスタイル
- インデントはスペース2つを使用
- セミコロンは省略しない
- 文字列はシングルクォートを使用
- オブジェクトのプロパティ名にはクォートを使用しない（必要な場合を除く）
- 関数の引数や変数宣言にはカンマを使用する
- 関数の戻り値の型は明示的に指定する
- インターフェースよりも型エイリアス（`type`）を優先する
- コンポーネントはアロー関数で定義する
- コンポーネントの型は `React.FC<Props>` ではなく、`(props: Props) => JSX.Element` を使用する

### エラーハンドリング
- エラーは適切にキャッチし、ユーザーフレンドリーなメッセージを表示する
- APIエンドポイントでは、適切なHTTPステータスコードを返す
- エラーログは開発環境でのみ詳細に表示し、本番環境では最小限に抑える

### パフォーマンス最適化
- 不必要な再レンダリングを避けるため、`useMemo`や`useCallback`を適切に使用する
- 大きなリストをレンダリングする場合は、仮想化を検討する
- 画像は適切に最適化し、`next/image`を使用する
- APIリクエストは必要最小限に抑え、適切にキャッシュする

## 開発ワークフロー

### テスト駆動開発（TDD）の徹底
- すべての新機能・修正は必ずテストファーストで開発する
- TDDの基本サイクルを厳守する：
  1. 失敗するテストを書く（Red）
  2. テストが通るように最小限の実装をする（Green）
  3. コードをリファクタリングする（Refactor）
- テストを書かずに実装を始めない
- テストカバレッジは80%以上を維持する
- 複雑なロジックほど、より詳細なテストケースを用意する
- バグ修正時は、まず再現テストを作成してから修正に取り組む
- テスト駆動で開発することで、設計の質と保守性を向上させる
- モックやスタブは必要最小限に抑え、可能な限り実際の依存関係を使用する
- 統合テストと単体テストのバランスを取り、テストピラミッドを意識する
- テストは仕様書としての役割も果たすため、テストコードの可読性を重視する

### コミットメッセージ
- コミットメッセージは「feat:」「fix:」「docs:」などのプレフィックスを使用する
- コミットメッセージは簡潔かつ明確に記述する
- 複数の変更を含む場合は、コミットを分割する

### プルリクエスト
- プルリクエストは小さく保ち、1つの機能や修正に焦点を当てる
- プルリクエストにはテストを含める
- プルリクエストのタイトルと説明は明確に記述する
- プルリクエストはレビュー前にセルフレビューを行う
